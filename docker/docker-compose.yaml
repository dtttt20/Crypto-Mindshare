services:
  timescaledb:
    image: timescale/timescaledb-ha:pg17
    environment:
      POSTGRES_USER: ${TIMESCALEDB_USER}
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD}
      POSTGRES_DB: ${TIMESCALEDB_DB}
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${TIMESCALEDB_USER}", "-d", "${TIMESCALEDB_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## To use the sample tweet db, uncomment the following section
  ## and uncomment the tweet archive version of TWEET_DATABASE_HOST, TWEET_DATABASE_NAME, etc.
  ## and comment out the tweet db section

  tweet_archive_db:
    image: timescale/timescaledb-ha:pg17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tweet_archive
    ports:
      - "5434:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "tweet_archive"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./tweet_archive_data:/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    depends_on:
      timescaledb:
        condition: service_healthy

  setup_mindshare_db:
    #Production
    # image: danewharton/setup-mindshare-db:0.0.1
    #Development
    build:
      context: ../
      dockerfile: docker/Dockerfile.setup-mindshare-db
    environment:
      MINDSHARE_DB_URL: ${MINDSHARE_DB_URL}
      MINDSHARE_DEFAULT_DB_URL: ${MINDSHARE_DEFAULT_DB_URL}
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: on-failure

  add_weight_config:
    #Production
    # image: danewharton/add-weight-config:0.0.1
    #Development
    build:
      context: ../
      dockerfile: docker/Dockerfile.add-weight-config
    environment:
      MINDSHARE_DB_URL: ${MINDSHARE_DB_URL}
    ## To add a weight config, uncomment the command below and run `docker compose up add_weight_config`
    ## Or when initially running the docker compose file, uncomment and specify the weight config below

    # command: ["python", "add_weight_config.py", "--json", "{
    # "name": "Initial Weight Config",
    # "description": "This is an example weight config",
    # "weights": {
    #     "like_weight": 0.6,
    #     "quote_weight": 1.1,
    #     "reply_weight": 0.8,
    #     "retweet_weight": 1.0,
    #     "bookmark_weight": 0.9,
    #     "impression_weight": 0.6,
    #     "time_decay_half_life_days": 30
    # },
    # "active": true
    # }"]
    depends_on:
      timescaledb:
        condition: service_healthy
      setup_mindshare_db:
        condition: service_completed_successfully
    restart: on-failure

  redis:
    image: redis:7.4-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mindshare_processor:
    #Production
    # image: danewharton/mindshare-processor:0.0.1
    #Development
    build:
      context: ../
      dockerfile: docker/Dockerfile.mindshare-processor
    environment:
      TWEET_DATABASE_HOST: ${TWEET_DATABASE_HOST}
      TWEET_DATABASE_NAME: ${TWEET_DATABASE_NAME}
      TWEET_DATABASE_USERNAME: ${TWEET_DATABASE_USERNAME}
      TWEET_DATABASE_PASSWORD: ${TWEET_DATABASE_PASSWORD}
      TWEET_DATABASE_PORT: ${TWEET_DATABASE_PORT}
      MINDSHARE_DB_URL: ${MINDSHARE_DB_URL}
      MINDSHARE_DEFAULT_DB_URL: ${MINDSHARE_DEFAULT_DB_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      STARTING_TIMESTAMP: ${STARTING_TIMESTAMP}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      MAX_TWEETS_PER_BATCH: ${MAX_TWEETS_PER_BATCH}
      MAX_CONCURRENT_TWEETS: ${MAX_CONCURRENT_TWEETS}
      MAX_CONCURRENT_VALIDATIONS: ${MAX_CONCURRENT_VALIDATIONS}
      OPENAI_MAX_CONCURRENT_REQUESTS: ${OPENAI_MAX_CONCURRENT_REQUESTS}
      OPENROUTER_MAX_CONCURRENT_REQUESTS: ${OPENROUTER_MAX_CONCURRENT_REQUESTS}
      PERPLEXITY_MAX_CONCURRENT_REQUESTS: ${PERPLEXITY_MAX_CONCURRENT_REQUESTS}
    depends_on:
      timescaledb:
        condition: service_healthy
      setup_mindshare_db:
        condition: service_completed_successfully
      add_weight_config:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - tweet_processor_data:/starting_timestamp
  fastapi:
    #Production
    # image: danewharton/fastapi:0.0.1
    #Development
    build:
      context: ../
      dockerfile: docker/Dockerfile.fastapi
    environment:
      MINDSHARE_DB_URL: ${MINDSHARE_DB_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
    ports:
      - "8000:8000"
    depends_on:
      timescaledb:
        condition: service_healthy
      setup_mindshare_db:
        condition: service_completed_successfully
      add_weight_config:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      mindshare_processor:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8000"]

volumes:
  timescaledb_data:
  redis_data:
  tweet_processor_data: